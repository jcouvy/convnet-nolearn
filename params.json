{
  "name": "Testing project site",
  "tagline": "This is literally a fish >)))]°>",
  "body": "Greetings, blablabla i'm a french student trying to speak decent english and write a blog about ML.\r\n\r\n## Prerequisites\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here [using GitHub Flavored Markdown](https://guides.github.com/features/mastering-markdown/), select a template crafted by a designer, and publish. After your page is generated, you can check out the new `gh-pages` branch locally. If you’re using GitHub Desktop, simply sync your repository and you’ll see the new branch.\r\n\r\n## Introduction\r\nWe’ve crafted some handsome templates for you to use. Go ahead and click 'Continue to layouts' to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved.\r\n\r\n### Convolutional network\r\n\r\n## Let's make a first model\r\nWe will start to fiddle with the different layers available. This is where `nolearn` really shines as it allows a clear and easy way to implement your net. First we need to import a few modules:\r\n```python\r\nimport lasagne\r\nfrom lasagne import layers #this allows us to use each pre-defined layer.\r\nfrom nolearn.lasagne import NeuralNet #used to implement your net in a very simple fashion.\r\n```\r\nWe need to initialize out network just like a variable, let's name it `net0`. The initialization is divided in two steps:\r\n- Describe the network architecture (i.e: layer composition)\r\n- Initialize each layer's parameters\r\n\r\n```python\r\nnet0 = NeuralNet(\r\n    layers = [('layer1_name', layers.InsertLayerType),\r\n              ('layer2_name', layers.InsertLayerType),\r\n              (...)],\r\n    layer1_param1 = ..., layer1_param2 = ...,\r\n    layer2_param1 = ..., layer2_param2 = ...,\r\n)\r\n```\r\n**Bear in mind that you need to use the pre-defined parameters name or an error will occur**\r\n\r\nYou are probably not yet familiar with each different layers, no worries we are going to cover that right now. Every single available layer is already implemented in Lasagne and that's good news. Those libraries are still young but their documentation are rich and the community is helpful, the following link will get you to the [Lasagne official documentation](https://lasagne.readthedocs.io/en/latest/modules/layers.html) where each layer is described.\r\n\r\nNow that we have the doc opened we can start playing with `net0` :\r\n```python\r\nnet0 = NeuralNet(\r\n    layers = [('input', layers.InputLayer),\r\n              ('conv', layers.Conv2DLayer),\r\n              ('maxpool', layers.MaxPool2DLayer),\r\n              ('output', layers.DenseLayer)\r\n              ],\r\n   input_shape = (None, 1, 28, 28), \r\n\r\n   conv_num_filters =  8, conv_filter_size = (3, 3),\r\n   maxpool_pool_size = (2, 2),\r\n   \r\n   output_num_units = 10, output_nonlinearity = lasagne.nonlinearities.softmax,\r\n\r\n   max_epochs = 10,\r\n   verbose = 1,\r\n)\r\n```\r\nSo what do we have here...\r\n- `input_shape` describes the data processed by the network. Later on we will use a handwritten digit database named MNIST (you can find more about it [here](http://yann.lecun.com/exdb/mnist/)). Each digit is a 28x28 1-dimensionnal image (grayscale so only 1 color channel).\r\n- `conv_num_filters` is the amount of filters (or kernels) you will use and `conv_filter_size` specifies their size, same goes for `maxpool_pool_size`.\r\n- `output_num_units` means that you subsamble your data down to 10 images.\r\n- `output_nonlinearity` is the activation function used, here it's the maximum (most commonly used for classification problems).\r\n\r\nPicking the proper sizes seems a little mystical but we will get to that. A nice site \r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}